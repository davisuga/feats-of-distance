(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

(* let add_tracks_to_playlist ~playlist_id ?position ?uris ~request_body () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/playlists/{playlist_id}/tracks" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "playlist_id" (fun x -> x) playlist_id in
    let uri = Request.maybe_add_query_param uri "position" Int32.to_string position in
    let uri = Request.maybe_add_query_param uri "uris" (fun x -> x) uris in
    let body = Request.write_as_json_body (JsonSupport.of_map_of ) request_body in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Reorder_or_replace_playlists_tracks_200_response.of_yojson) resp body *)

let check_users_saved_tracks ~ids =
  let open Lwt.Infix in
  let uri = Request.build_uri "/me/tracks/contains" in
  let headers = Request.default_headers in
  let uri = Request.add_query_param uri "ids" (fun x -> x) ids in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as_list_of JsonSupport.to_bool resp body

let get_an_albums_tracks ~id ?market ?(limit = 20l) ?(offset = 0l) () =
  let open Lwt.Infix in
  let uri = Request.build_uri "/albums/{id}/tracks" in
  let headers = Request.default_headers in
  let uri = Request.replace_path_param uri "id" (fun x -> x) id in
  let uri = Request.maybe_add_query_param uri "market" (fun x -> x) market in
  let uri = Request.add_query_param uri "limit" Int32.to_string limit in
  let uri = Request.add_query_param uri "offset" Int32.to_string offset in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as
    (JsonSupport.unwrap Simplified_tracks_paging_object.of_yojson)
    resp body

let get_an_artists_top_tracks ~id ?market () =
  let open Lwt.Infix in
  let uri = Request.build_uri "/artists/{id}/top-tracks" in
  let headers = Request.default_headers in
  let uri = Request.replace_path_param uri "id" (fun x -> x) id in
  let uri = Request.maybe_add_query_param uri "market" (fun x -> x) market in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as
    (JsonSupport.unwrap Get_an_artists_top_tracks_200_response.of_yojson)
    resp body

let get_audio_analysis ~id =
  let open Lwt.Infix in
  let uri = Request.build_uri "/audio-analysis/{id}" in
  let headers = Request.default_headers in
  let uri = Request.replace_path_param uri "id" (fun x -> x) id in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as
    (JsonSupport.unwrap Audio_analysis_object.of_yojson)
    resp body

let get_audio_features ~id =
  let open Lwt.Infix in
  let uri = Request.build_uri "/audio-features/{id}" in
  let headers = Request.default_headers in
  let uri = Request.replace_path_param uri "id" (fun x -> x) id in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as
    (JsonSupport.unwrap Audio_features_object.of_yojson)
    resp body

let get_playlists_tracks ~playlist_id ?market ?fields ?(limit = 20l)
    ?(offset = 0l) ?additional_types () =
  let open Lwt.Infix in
  let uri = Request.build_uri "/playlists/{playlist_id}/tracks" in
  let headers = Request.default_headers in
  let uri =
    Request.replace_path_param uri "playlist_id" (fun x -> x) playlist_id
  in
  let uri = Request.maybe_add_query_param uri "market" (fun x -> x) market in
  let uri = Request.maybe_add_query_param uri "fields" (fun x -> x) fields in
  let uri = Request.add_query_param uri "limit" Int32.to_string limit in
  let uri = Request.add_query_param uri "offset" Int32.to_string offset in
  let uri =
    Request.maybe_add_query_param uri "additional_types"
      (fun x -> x)
      additional_types
  in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as
    (JsonSupport.unwrap Playlist_tracks_paging_object.of_yojson)
    resp body

let get_recommendations ~seed_artists ~seed_genres ~seed_tracks ?(limit = 20l)
    ?market ?min_acousticness ?max_acousticness ?target_acousticness
    ?min_danceability ?max_danceability ?target_danceability ?min_duration_ms
    ?max_duration_ms ?target_duration_ms ?min_energy ?max_energy ?target_energy
    ?min_instrumentalness ?max_instrumentalness ?target_instrumentalness
    ?min_key ?max_key ?target_key ?min_liveness ?max_liveness ?target_liveness
    ?min_loudness ?max_loudness ?target_loudness ?min_mode ?max_mode
    ?target_mode ?min_popularity ?max_popularity ?target_popularity
    ?min_speechiness ?max_speechiness ?target_speechiness ?min_tempo ?max_tempo
    ?target_tempo ?min_time_signature ?max_time_signature ?target_time_signature
    ?min_valence ?max_valence ?target_valence () =
  let open Lwt.Infix in
  let uri = Request.build_uri "/recommendations" in
  let headers = Request.default_headers in
  let uri = Request.add_query_param uri "limit" Int32.to_string limit in
  let uri = Request.maybe_add_query_param uri "market" (fun x -> x) market in
  let uri =
    Request.add_query_param uri "seed_artists" (fun x -> x) seed_artists
  in
  let uri =
    Request.add_query_param uri "seed_genres" (fun x -> x) seed_genres
  in
  let uri =
    Request.add_query_param uri "seed_tracks" (fun x -> x) seed_tracks
  in
  let uri =
    Request.maybe_add_query_param uri "min_acousticness" string_of_float
      min_acousticness
  in
  let uri =
    Request.maybe_add_query_param uri "max_acousticness" string_of_float
      max_acousticness
  in
  let uri =
    Request.maybe_add_query_param uri "target_acousticness" string_of_float
      target_acousticness
  in
  let uri =
    Request.maybe_add_query_param uri "min_danceability" string_of_float
      min_danceability
  in
  let uri =
    Request.maybe_add_query_param uri "max_danceability" string_of_float
      max_danceability
  in
  let uri =
    Request.maybe_add_query_param uri "target_danceability" string_of_float
      target_danceability
  in
  let uri =
    Request.maybe_add_query_param uri "min_duration_ms" Int32.to_string
      min_duration_ms
  in
  let uri =
    Request.maybe_add_query_param uri "max_duration_ms" Int32.to_string
      max_duration_ms
  in
  let uri =
    Request.maybe_add_query_param uri "target_duration_ms" Int32.to_string
      target_duration_ms
  in
  let uri =
    Request.maybe_add_query_param uri "min_energy" string_of_float min_energy
  in
  let uri =
    Request.maybe_add_query_param uri "max_energy" string_of_float max_energy
  in
  let uri =
    Request.maybe_add_query_param uri "target_energy" string_of_float
      target_energy
  in
  let uri =
    Request.maybe_add_query_param uri "min_instrumentalness" string_of_float
      min_instrumentalness
  in
  let uri =
    Request.maybe_add_query_param uri "max_instrumentalness" string_of_float
      max_instrumentalness
  in
  let uri =
    Request.maybe_add_query_param uri "target_instrumentalness" string_of_float
      target_instrumentalness
  in
  let uri =
    Request.maybe_add_query_param uri "min_key" Int32.to_string min_key
  in
  let uri =
    Request.maybe_add_query_param uri "max_key" Int32.to_string max_key
  in
  let uri =
    Request.maybe_add_query_param uri "target_key" Int32.to_string target_key
  in
  let uri =
    Request.maybe_add_query_param uri "min_liveness" string_of_float
      min_liveness
  in
  let uri =
    Request.maybe_add_query_param uri "max_liveness" string_of_float
      max_liveness
  in
  let uri =
    Request.maybe_add_query_param uri "target_liveness" string_of_float
      target_liveness
  in
  let uri =
    Request.maybe_add_query_param uri "min_loudness" string_of_float
      min_loudness
  in
  let uri =
    Request.maybe_add_query_param uri "max_loudness" string_of_float
      max_loudness
  in
  let uri =
    Request.maybe_add_query_param uri "target_loudness" string_of_float
      target_loudness
  in
  let uri =
    Request.maybe_add_query_param uri "min_mode" Int32.to_string min_mode
  in
  let uri =
    Request.maybe_add_query_param uri "max_mode" Int32.to_string max_mode
  in
  let uri =
    Request.maybe_add_query_param uri "target_mode" Int32.to_string target_mode
  in
  let uri =
    Request.maybe_add_query_param uri "min_popularity" Int32.to_string
      min_popularity
  in
  let uri =
    Request.maybe_add_query_param uri "max_popularity" Int32.to_string
      max_popularity
  in
  let uri =
    Request.maybe_add_query_param uri "target_popularity" Int32.to_string
      target_popularity
  in
  let uri =
    Request.maybe_add_query_param uri "min_speechiness" string_of_float
      min_speechiness
  in
  let uri =
    Request.maybe_add_query_param uri "max_speechiness" string_of_float
      max_speechiness
  in
  let uri =
    Request.maybe_add_query_param uri "target_speechiness" string_of_float
      target_speechiness
  in
  let uri =
    Request.maybe_add_query_param uri "min_tempo" string_of_float min_tempo
  in
  let uri =
    Request.maybe_add_query_param uri "max_tempo" string_of_float max_tempo
  in
  let uri =
    Request.maybe_add_query_param uri "target_tempo" string_of_float
      target_tempo
  in
  let uri =
    Request.maybe_add_query_param uri "min_time_signature" Int32.to_string
      min_time_signature
  in
  let uri =
    Request.maybe_add_query_param uri "max_time_signature" Int32.to_string
      max_time_signature
  in
  let uri =
    Request.maybe_add_query_param uri "target_time_signature" Int32.to_string
      target_time_signature
  in
  let uri =
    Request.maybe_add_query_param uri "min_valence" string_of_float min_valence
  in
  let uri =
    Request.maybe_add_query_param uri "max_valence" string_of_float max_valence
  in
  let uri =
    Request.maybe_add_query_param uri "target_valence" string_of_float
      target_valence
  in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as
    (JsonSupport.unwrap Recommendations_object.of_yojson)
    resp body

let get_several_audio_features ~ids =
  let open Lwt.Infix in
  let uri = Request.build_uri "/audio-features" in
  let headers = Request.default_headers in
  let uri = Request.add_query_param uri "ids" (fun x -> x) ids in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as
    (JsonSupport.unwrap Get_several_audio_features_200_response.of_yojson)
    resp body

let get_several_tracks ~ids ?market () =
  let open Lwt.Infix in
  let uri = Request.build_uri "/tracks" in
  let headers = Request.default_headers in
  let uri = Request.maybe_add_query_param uri "market" (fun x -> x) market in
  let uri = Request.add_query_param uri "ids" (fun x -> x) ids in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as
    (JsonSupport.unwrap Get_an_artists_top_tracks_200_response.of_yojson)
    resp body

let get_track ~id ?market () =
  let open Lwt.Infix in
  let uri = Request.build_uri "/tracks/{id}" in
  let headers = Request.default_headers in
  let uri = Request.replace_path_param uri "id" (fun x -> x) id in
  let uri = Request.maybe_add_query_param uri "market" (fun x -> x) market in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as
    (JsonSupport.unwrap Track_object.of_yojson)
    resp body

let get_users_saved_tracks ?market ?(limit = 20l) ?(offset = 0l) () =
  let open Lwt.Infix in
  let uri = Request.build_uri "/me/tracks" in
  let headers = Request.default_headers in
  let uri = Request.maybe_add_query_param uri "market" (fun x -> x) market in
  let uri = Request.add_query_param uri "limit" Int32.to_string limit in
  let uri = Request.add_query_param uri "offset" Int32.to_string offset in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as
    (JsonSupport.unwrap Get_users_saved_tracks_200_response.of_yojson)
    resp body

let get_users_top_tracks ?(time_range = "medium_term") ?(limit = 20l)
    ?(offset = 0l) () =
  let open Lwt.Infix in
  let uri = Request.build_uri "/me/top/tracks" in
  let headers = Request.default_headers in
  let uri = Request.add_query_param uri "time_range" (fun x -> x) time_range in
  let uri = Request.add_query_param uri "limit" Int32.to_string limit in
  let uri = Request.add_query_param uri "offset" Int32.to_string offset in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as
    (JsonSupport.unwrap Tracks_paging_object.of_yojson)
    resp body

let remove_tracks_playlist ~playlist_id ~remove_tracks_playlist_request_t () =
  let open Lwt.Infix in
  let uri = Request.build_uri "/playlists/{playlist_id}/tracks" in
  let headers = Request.default_headers in
  let uri =
    Request.replace_path_param uri "playlist_id" (fun x -> x) playlist_id
  in
  let body =
    Request.write_as_json_body Remove_tracks_playlist_request.to_yojson
      remove_tracks_playlist_request_t
  in
  Cohttp_lwt_unix.Client.call `DELETE uri ~headers ~body >>= fun (resp, body) ->
  Request.read_json_body_as
    (JsonSupport.unwrap
       Reorder_or_replace_playlists_tracks_200_response.of_yojson)
    resp body

(* let remove_tracks_user ~ids ~request_body () =
       let open Lwt.Infix in
       let uri = Request.build_uri "/me/tracks" in
       let headers = Request.default_headers in
       let uri = Request.add_query_param uri "ids" (fun x -> x) ids in
       let body = Request.write_as_json_body (JsonSupport.of_map_of ) request_body in
       Cohttp_lwt_unix.Client.call `DELETE uri ~headers ~body >>= fun (resp, body) ->
       Request.handle_unit_response resp

   let reorder_or_replace_playlists_tracks ~playlist_id ?uris ~request_body () =
       let open Lwt.Infix in
       let uri = Request.build_uri "/playlists/{playlist_id}/tracks" in
       let headers = Request.default_headers in
       let uri = Request.replace_path_param uri "playlist_id" (fun x -> x) playlist_id in
       let uri = Request.maybe_add_query_param uri "uris" (fun x -> x) uris in
       let body = Request.write_as_json_body (JsonSupport.of_map_of ) request_body in
       Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
       Request.read_json_body_as (JsonSupport.unwrap Reorder_or_replace_playlists_tracks_200_response.of_yojson) resp body

   let save_tracks_user ~ids ~request_body () =
       let open Lwt.Infix in
       let uri = Request.build_uri "/me/tracks" in
       let headers = Request.default_headers in
       let uri = Request.add_query_param uri "ids" (fun x -> x) ids in
       let body = Request.write_as_json_body (JsonSupport.of_map_of ) request_body in
       Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
       Request.handle_unit_response resp
*)
