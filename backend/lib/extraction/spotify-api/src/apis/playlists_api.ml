(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

(* let add_tracks_to_playlist ~playlist_id ?position ?uris ~request_body () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/playlists/{playlist_id}/tracks" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "playlist_id" (fun x -> x) playlist_id in
    let uri = Request.maybe_add_query_param uri "position" Int32.to_string position in
    let uri = Request.maybe_add_query_param uri "uris" (fun x -> x) uris in
    let body = Request.write_as_json_body (JsonSupport.of_map_of ) request_body in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Reorder_or_replace_playlists_tracks_200_response.of_yojson) resp body *)

(* let change_playlist_details ~playlist_id ~request_body () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/playlists/{playlist_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "playlist_id" (fun x -> x) playlist_id in
    let body = Request.write_as_json_body (JsonSupport.of_map_of ) request_body in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp *)

let check_if_user_follows_playlist ~playlist_id ~ids =
  let open Lwt.Infix in
  let uri = Request.build_uri "/playlists/{playlist_id}/followers/contains" in
  let headers = Request.default_headers in
  let uri =
    Request.replace_path_param uri "playlist_id" (fun x -> x) playlist_id
  in
  let uri = Request.add_query_param uri "ids" (fun x -> x) ids in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as_list_of JsonSupport.to_bool resp body

(* let create_playlist ~user_id ~request_body () =
       let open Lwt.Infix in
       let uri = Request.build_uri "/users/{user_id}/playlists" in
       let headers = Request.default_headers in
       let uri = Request.replace_path_param uri "user_id" (fun x -> x) user_id in
       let body = Request.write_as_json_body (JsonSupport.of_map_of ) request_body in
       Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
       Request.read_json_body_as (JsonSupport.unwrap Playlist_object.of_yojson) resp body

   let follow_playlist ~playlist_id ~request_body () =
       let open Lwt.Infix in
       let uri = Request.build_uri "/playlists/{playlist_id}/followers" in
       let headers = Request.default_headers in
       let uri = Request.replace_path_param uri "playlist_id" (fun x -> x) playlist_id in
       let body = Request.write_as_json_body (JsonSupport.of_map_of ) request_body in
       Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
       Request.handle_unit_response resp *)

let get_a_categories_playlists ~category_id ?country ?(limit = 20l)
    ?(offset = 0l) () =
  let open Lwt.Infix in
  let uri = Request.build_uri "/browse/categories/{category_id}/playlists" in
  let headers = Request.default_headers in
  let uri =
    Request.replace_path_param uri "category_id" (fun x -> x) category_id
  in
  let uri = Request.maybe_add_query_param uri "country" (fun x -> x) country in
  let uri = Request.add_query_param uri "limit" Int32.to_string limit in
  let uri = Request.add_query_param uri "offset" Int32.to_string offset in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as
    (JsonSupport.unwrap Get_a_categories_playlists_200_response.of_yojson)
    resp body

let get_a_list_of_current_users_playlists ?(limit = 20l) ?(offset = 0l) () =
  let open Lwt.Infix in
  let uri = Request.build_uri "/me/playlists" in
  let headers = Request.default_headers in
  let uri = Request.add_query_param uri "limit" Int32.to_string limit in
  let uri = Request.add_query_param uri "offset" Int32.to_string offset in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as
    (JsonSupport.unwrap Playlists_paging_object.of_yojson)
    resp body

let get_featured_playlists ?country ?locale ?timestamp ?(limit = 20l)
    ?(offset = 0l) () =
  let open Lwt.Infix in
  let uri = Request.build_uri "/browse/featured-playlists" in
  let headers = Request.default_headers in
  let uri = Request.maybe_add_query_param uri "country" (fun x -> x) country in
  let uri = Request.maybe_add_query_param uri "locale" (fun x -> x) locale in
  let uri =
    Request.maybe_add_query_param uri "timestamp" (fun x -> x) timestamp
  in
  let uri = Request.add_query_param uri "limit" Int32.to_string limit in
  let uri = Request.add_query_param uri "offset" Int32.to_string offset in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as
    (JsonSupport.unwrap Get_featured_playlists_200_response.of_yojson)
    resp body

let get_list_users_playlists ~user_id ?(limit = 20l) ?(offset = 0l) () =
  let open Lwt.Infix in
  let uri = Request.build_uri "/users/{user_id}/playlists" in
  let headers = Request.default_headers in
  let uri = Request.replace_path_param uri "user_id" (fun x -> x) user_id in
  let uri = Request.add_query_param uri "limit" Int32.to_string limit in
  let uri = Request.add_query_param uri "offset" Int32.to_string offset in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as
    (JsonSupport.unwrap Playlists_paging_object.of_yojson)
    resp body

let get_playlist ~playlist_id ?market ?fields ?additional_types () =
  let open Lwt.Infix in
  let uri = Request.build_uri "/playlists/{playlist_id}" in
  let headers = Request.default_headers in
  let uri =
    Request.replace_path_param uri "playlist_id" (fun x -> x) playlist_id
  in
  let uri = Request.maybe_add_query_param uri "market" (fun x -> x) market in
  let uri = Request.maybe_add_query_param uri "fields" (fun x -> x) fields in
  let uri =
    Request.maybe_add_query_param uri "additional_types"
      (fun x -> x)
      additional_types
  in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as
    (JsonSupport.unwrap Playlist_object.of_yojson)
    resp body

let get_playlist_cover ~playlist_id =
  let open Lwt.Infix in
  let uri = Request.build_uri "/playlists/{playlist_id}/images" in
  let headers = Request.default_headers in
  let uri =
    Request.replace_path_param uri "playlist_id" (fun x -> x) playlist_id
  in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as_list_of
    (JsonSupport.unwrap Image_object.of_yojson)
    resp body

let get_playlists_tracks ~playlist_id ?market ?fields ?(limit = 20l)
    ?(offset = 0l) ?additional_types () =
  let open Lwt.Infix in
  let uri = Request.build_uri "/playlists/{playlist_id}/tracks" in
  let headers = Request.default_headers in
  let uri =
    Request.replace_path_param uri "playlist_id" (fun x -> x) playlist_id
  in
  let uri = Request.maybe_add_query_param uri "market" (fun x -> x) market in
  let uri = Request.maybe_add_query_param uri "fields" (fun x -> x) fields in
  let uri = Request.add_query_param uri "limit" Int32.to_string limit in
  let uri = Request.add_query_param uri "offset" Int32.to_string offset in
  let uri =
    Request.maybe_add_query_param uri "additional_types"
      (fun x -> x)
      additional_types
  in
  Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
  Request.read_json_body_as
    (JsonSupport.unwrap Playlist_tracks_paging_object.of_yojson)
    resp body

let remove_tracks_playlist ~playlist_id ~remove_tracks_playlist_request_t () =
  let open Lwt.Infix in
  let uri = Request.build_uri "/playlists/{playlist_id}/tracks" in
  let headers = Request.default_headers in
  let uri =
    Request.replace_path_param uri "playlist_id" (fun x -> x) playlist_id
  in
  let body =
    Request.write_as_json_body Remove_tracks_playlist_request.to_yojson
      remove_tracks_playlist_request_t
  in
  Cohttp_lwt_unix.Client.call `DELETE uri ~headers ~body >>= fun (resp, body) ->
  Request.read_json_body_as
    (JsonSupport.unwrap
       Reorder_or_replace_playlists_tracks_200_response.of_yojson)
    resp body

(* let reorder_or_replace_playlists_tracks ~playlist_id ?uris ~request_body () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/playlists/{playlist_id}/tracks" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "playlist_id" (fun x -> x) playlist_id in
    let uri = Request.maybe_add_query_param uri "uris" (fun x -> x) uris in
    let body = Request.write_as_json_body (JsonSupport.of_map_of ) request_body in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Reorder_or_replace_playlists_tracks_200_response.of_yojson) resp body *)

let unfollow_playlist ~playlist_id =
  let open Lwt.Infix in
  let uri = Request.build_uri "/playlists/{playlist_id}/followers" in
  let headers = Request.default_headers in
  let uri =
    Request.replace_path_param uri "playlist_id" (fun x -> x) playlist_id
  in
  Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
  Request.handle_unit_response resp

let upload_custom_playlist_cover ~playlist_id ~body =
  let open Lwt.Infix in
  let uri = Request.build_uri "/playlists/{playlist_id}/images" in
  let headers = Request.default_headers in
  let uri =
    Request.replace_path_param uri "playlist_id" (fun x -> x) playlist_id
  in
  let body = Request.write_as_json_body JsonSupport.of_string body in
  Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
  Request.handle_unit_response resp
