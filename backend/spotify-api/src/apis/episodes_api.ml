(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

let check_users_saved_episodes ~ids =
    let open Lwt.Infix in
    let uri = Request.build_uri "/me/episodes/contains" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "ids" (fun x -> x) ids in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.to_bool) resp body

let get_a_shows_episodes ~id ?market ?(limit = 20l) ?(offset = 0l) () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/shows/{id}/episodes" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.maybe_add_query_param uri "market" (fun x -> x) market in
    let uri = Request.add_query_param uri "limit" Int32.to_string limit in
    let uri = Request.add_query_param uri "offset" Int32.to_string offset in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Episodes_paging_object.of_yojson) resp body

let get_an_episode ~id ?market () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/episodes/{id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "id" (fun x -> x) id in
    let uri = Request.maybe_add_query_param uri "market" (fun x -> x) market in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Episode_object.of_yojson) resp body

let get_multiple_episodes ~ids ?market () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/episodes" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "ids" (fun x -> x) ids in
    let uri = Request.maybe_add_query_param uri "market" (fun x -> x) market in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Get_multiple_episodes_200_response.of_yojson) resp body

let get_users_saved_episodes ?market ?(limit = 20l) ?(offset = 0l) () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/me/episodes" in
    let headers = Request.default_headers in
    let uri = Request.maybe_add_query_param uri "market" (fun x -> x) market in
    let uri = Request.add_query_param uri "limit" Int32.to_string limit in
    let uri = Request.add_query_param uri "offset" Int32.to_string offset in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Get_users_saved_episodes_200_response.of_yojson) resp body

let remove_episodes_user ~ids ~request_body () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/me/episodes" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "ids" (fun x -> x) ids in
    let body = Request.write_as_json_body (JsonSupport.of_map_of ) request_body in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let save_episodes_user ~ids ~request_body () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/me/episodes" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "ids" (fun x -> x) ids in
    let body = Request.write_as_json_body (JsonSupport.of_map_of ) request_body in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

