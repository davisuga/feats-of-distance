(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

type t = {
    album: Track_object_album.t option [@default None];
    (* The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.  *)
    artists: Artist_object.t list;
    (* A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.  *)
    available_markets: string list;
    (* The disc number (usually `1` unless the album consists of more than one disc).  *)
    disc_number: int32 option [@default None];
    (* The track length in milliseconds.  *)
    duration_ms: int32 option [@default None];
    (* Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).  *)
    explicit: bool option [@default None];
    external_ids: Track_object_external_ids.t option [@default None];
    external_urls: Linked_track_object_external_urls.t option [@default None];
    (* A link to the Web API endpoint providing full details of the track.  *)
    href: string option [@default None];
    (* The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the track.  *)
    id: string option [@default None];
    (* Part of the response when [Track Relinking](/documentation/general/guides/track-relinking-guide/) is applied. If `true`, the track is playable in the given market. Otherwise `false`.  *)
    is_playable: bool option [@default None];
    linked_from: Track_object_linked_from.t option [@default None];
    restrictions: Simplified_track_object_restrictions.t option [@default None];
    (* The name of the track.  *)
    name: string option [@default None];
    (* The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._  *)
    popularity: int32 option [@default None];
    (* A link to a 30 second preview (MP3 format) of the track. Can be `null`  *)
    preview_url: string option [@default None];
    (* The number of the track. If an album has several discs, the track number is the number on the specified disc.  *)
    track_number: int32 option [@default None];
    (* The object type: \''track\''.  *)
    _type: string option [@default None];
    (* The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the track.  *)
    uri: string option [@default None];
    (* Whether or not the track is from a local file.  *)
    is_local: bool option [@default None];
} [@@deriving yojson { strict = false }, show ];;

let create () : t = {
    album = None;
    artists = [];
    available_markets = [];
    disc_number = None;
    duration_ms = None;
    explicit = None;
    external_ids = None;
    external_urls = None;
    href = None;
    id = None;
    is_playable = None;
    linked_from = None;
    restrictions = None;
    name = None;
    popularity = None;
    preview_url = None;
    track_number = None;
    _type = None;
    uri = None;
    is_local = None;
}

